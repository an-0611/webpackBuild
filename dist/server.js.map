{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"react-helmet\"","webpack:///external \"webpack\"","webpack:///./server.js","webpack:///external \"react-dom/server\"","webpack:///./src/html.js","webpack:///./src/components/app.js","webpack:///external \"styled-components\"","webpack:///external \"webpack-dev-middleware\"","webpack:///external \"webpack-hot-middleware\"","webpack:///./webpack.config.js","webpack:///external \"path\"","webpack:///external \"html-webpack-plugin\"","webpack:///external \"webpack-node-externals\"","webpack:///external \"express\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","express","app","port","process","env","PORT","req","res","helmet","Helmet","renderStatic","appHtml","renderToString","send","renderToStaticMarkup","err","console","log","listen","error","use","this","props","lang","title","toComponent","meta","content","httpEquiv","id","dangerouslySetInnerHTML","__html","type","src","Component","Container","styled","div","primary","css","state","callValue","alert","prefetch","className","onClick","path","webpack","HtmlWebpackPlugin","nodeExternals","client","devtool","entry","bundle","output","resolve","__dirname","filename","optimization","splitChunks","chunks","plugins","optimize","OccurrenceOrderPlugin","NoEmitOnErrorsPlugin","template","rules","test","exclude","loader","extensions","server","externals","target"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"react\");","module.exports = require(\"react-helmet\");","module.exports = require(\"webpack\");","import React from 'react';\nconst webpack = require('webpack')\nconst webpackDevMiddleware = require('webpack-dev-middleware')\nconst webpackHotMiddleware = require('webpack-hot-middleware')\nconst config = require('./webpack.config.js')\n\n// const http = require('http');\n\nconst express = require('express')\nconst app = express();\nconst port = process.env.PORT || 8080; // 用docker 時換成8080,  webpack output記得改   \n// const host = process.env.PORT ? null : '0.0.0.0';\n\nimport { renderToStaticMarkup, renderToString } from 'react-dom/server';\n\n// import { ServerStyleSheet } from 'styled-components'\n\nimport { Helmet } from 'react-helmet';\n// how to set server.js to read es6  // 把server 拉到跟entry ./src/index.js 同一層 // dockerfile && package.json server.js's router also need to change\nimport Html from './src/html' // 使用 import 需先編譯打包至dist 開啟的server 路徑也改成 ./dist/server.js\nimport App from './src/components/app';\n\nif (process.env.PORT) {\n  try {\n    app.get('/', function(req, res) {\n      try {\n        const helmet = Helmet.renderStatic();\n        const appHtml = renderToString(<App />);\n        res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n          helmet={helmet}\n          appHtml={appHtml}\n        />)}`);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n      \n    app.listen(port, function(error) {\n      if (error) {\n        console.error(error)\n      } else {\n        console.log('伺服器已啟動在 port %s', port);\n      }\n    })\n\n  //   app.get('/', function(req, res) { // 之後改成ssr 先用測試\n  //     var body = '<!doctype html>' +\n  //       '<html lang=\"zh-TW\">'+\n  //       '<head><meta charset=\"utf-8\"></head>' +\n  //       '<body>' +\n  //       '<div>server render heroku test</div>'\n  //       '</body>'+\n  //       '</html>';\n  //     res.writeHead(200, {\"Content-Type\": \"text/html\"});\n  //     res.write(body);\n  //     res.end();\n  //   });\n  //   app.listen(port, () => console.log((`Listening on ${port}`))) // need listen port to run server\n  } catch(err) {\n    console.log(err)\n  }\n  \n} else {\n  console.log('本機伺服器啟動')\n  const host = '0.0.0.0';\n  // app.use(path, router) router 代表一個由express.Router()創建的對象 可定義多個路由規則\n  // app.get() // 當只有一個規則時 用app.get()直接回掉function 即可\n  \n  // const compiler = webpack(config);\n  // app.use(webpackDevMiddleware(compiler, { // app.use() =< 此方法是宣告使用一個路由，變數 index 就是引入 routers 資料夾裡的 index.route 檔案，該路徑詳細內容就在該文件中編輯。\n  //   noInfo: true,\n  //   publicPath: config.output.publicPath\n  // })) \n  // app.use(webpackHotMiddleware(compiler))\n\n  // app.get('/', function(req, res) {\n  //   // res.sendFile(__dirname + './dist/index.html')\n  //   res.sendFile(__dirname + '/index.html')\n  // })\n  \n  // const sheet = new ServerStyleSheet()\n\n  try {\n    \n    // app.use('/', express.static('dist')); // 放外面 css 就失效 ssr 也跟著壞 路徑改成只抓css? stylecomponent class 還在但失效\n    // app.use(express.static('dist')); // 有用middleware 使用app.use 反之 app.get\n\n    app.get('/', function(req, res) { // step2\n      try {\n        app.use('/', express.static('dist')); // step3 // 完成server 渲染<Html> , 需要把client side 靜態資源復原 (client.bundle.js || css) 取代<Html內容> 但事件消失 hydrate 也沒用\n        // 把client side 資源載進來 bundle.js server side render 才吃得到伺服器第一次渲染資料 但放在裡面後 css 會失效 (不確定是不是stylecomponent問題) css 改成由html.js 引入\n\n        // res.send is only on express server 只能調用一次 // 用於本機測試server 無論dev or production // 上傳至heroku or aws 會走上面 process.env.PORT的code\n        const helmet = Helmet.renderStatic();\n        const appHtml = renderToString(<App />);\n        \n        // 提供給 express.static 函數的路徑，是相對於您從中啟動 node 程序的目錄。如果您是從另一個目錄執行 Express 應用程式，保險作法是使用您想提供之目錄的絕對路徑\n        // https://expressjs.com/zh-tw/starter/static-files.html\n        // renderToStaticMarku 可能造成換閃一下 // https://www.jishuwen.com/d/2BoD/zh-tw\n        res.send(`<!doctype html>\\n${renderToStaticMarkup(<Html\n          helmet={helmet}\n          appHtml={appHtml}// 資料已經帶進去但server side 尚未render // test express router\n          // https://pjchender.github.io/2018/09/21/react-ssr-%E7%AD%86%E8%A8%98/\n          // https://github.com/jakoblind/universal-react-server-bundle\n          // https://medium.com/@slashtu/react-loadable-ssr-and-code-splitting-ede5b31baf35\n        />)}`);\n\n      } catch (err) {\n        console.log(err);\n      }\n    });\n\n    app.listen(port, host, function(error) {\n      if (error) {\n        console.error(error)\n      } else {\n        console.log('伺服器已啟動在 port %s . 打開 http://%s:%s/ 查看', port, host, port)\n      }\n    })\n  } catch (err) {\n    console.log('serverErrorCatch: ', err);\n  }\n  // finally {\n  //   sheet.seal();\n  // }\n\n}\n\n// can reference \n// https://iter01.com/11212.html\n// https://github.com/jakoblind/universal-react-server-bundle/blob/master/server.js\n\n// !!!\n// https://pjchender.github.io/2018/09/21/react-ssr-%E7%AD%86%E8%A8%98/\n\n// webpack build from 0 to 1\n// https://segmentfault.com/a/1190000015490721\n\n// React Loadable\n// https://medium.com/@slashtu/react-loadable-ssr-and-code-splitting-ede5b31baf35\n\n// React-Webpack4-Babel-setup(github repo)\n// https://github.com/BusiRaja/React-Webpack4-Babel-Setup\n\n// most compeleted CICD (contain docker aws nodejs github circleCI...)\n// https://blog.amowu.com/2015/04/devops-continuous-integration-delivery-docker-circleci-aws-beanstalk.html","module.exports = require(\"react-dom/server\");","import React, { Component } from 'react';\n\nclass Html extends Component {\n  render() {\n    const { helmet, appHtml } = this.props;\n    // const scripts = bundles.filter(bundle => bundle.file.endsWith('.js')).map(bundle => <script src={`${siteUrl}${bundle.file}${staticVer}`} />);\n    // const scripts = <script src=\"./main.js\" />;\n    // const scripts1 = <script src=\"./1.main.js\" />;\n    // manifest service is for PWA\n    // const style = {\n    //   'background': 'none'\n    // }\n    return (\n      <html lang=\"zh-TW\">\n        <head>\n          {helmet.title.toComponent()}\n          {helmet.meta.toComponent()}\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta httpEquiv=\"x-ua-compatible\" content=\"IE=edge\" />\n        </head>\n        <body id=\"body\">{/* style={ style } */}\n          <div id=\"app\" dangerouslySetInnerHTML={{ __html: appHtml }} />\n          {/* <div id=\"app\" dangerouslySetInnerHTML={{ __html: 'bodybody12333' }} /> */}\n          <script type=\"text/javascript\" src=\"vendors~bundle.js\" />{/* !!!!!!　 */}\n          {/* !!!!! app.use('/', express.static('dist')) 放在app.get()外面是client side render 放入 app.get內疚變成ssr */}\n          {/* 但此時的綑綁變為兩包(webpack有把綑綁拆成兩包) 這邊的vendors~bundle.js在ssr的時候抓不到 需手動添加進html.js 添加完即完成ssr */}\n\n          <script type=\"text/javascript\" src=\"bundle.js\" />{/* 包含所有client file */}\n          {/* <script type=\"text/javascript\" src={`${window.location.href}bundle.js`} /> */}{/* 還在server side抓不到window */}\n          {/* // https://github.com/jakoblind/universal-react-server-bundle/blob/master/webpack.config.js */}\n        </body>\n      </html>\n    );\n  }\n}\n\nexport default Html;","import React, { Component } from 'react'\nimport Helmet from 'react-helmet';\nimport styled, { css } from 'styled-components'\n\nconst Container = styled.div`\n  color: ${props => props.primary ? 'green' : 'red'};\n  text-align: center;\n  opaciy: 1;\n  ${props => props.primary && css`\n    background: white;\n    border: 1px solid black;\n  `};\n`\n// https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 666,\n    };\n    this.callValue = this.callValue.bind(this);\n  }\n\n  callValue() {\n    alert(this.state.value)\n  }\n\n  render() {\n    return (\n      <Container prefetch>{/* prefetch預取 提前完成渲染? */}\n        <Helmet>\n          <title>helmet test</title>\n          <meta name=\"description\" content=\"desc ssr test\" />\n        </Helmet>\n        <div className=\"app\">webpack 4 環境建制</div>\n        <Container primary>\n          <div>test</div>\n          <button onClick={() => { this.callValue() }}>callValue</button>\n        </Container>\n      </Container>\n      // npm run git -- \"\" && postgit\n      // npm run git -- \"update css module\" && postgit\n      // 測試 build 好的檔案 'test': npm run build && mocha --compilers js:babel-core/register\n      // docker deploy => npm run build && docker-compose up -d https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/188625/\n      // dockerfile setting https://www.jinnsblog.com/2018/12/docker-dockerfile-guide.html\n    );\n  }\n}\n\n// if (module.hot) module.hot.accept();\n\nexport default App;","module.exports = require(\"styled-components\");","module.exports = require(\"webpack-dev-middleware\");","module.exports = require(\"webpack-hot-middleware\");","const path = require('path');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst nodeExternals = require('webpack-node-externals');  // 防止將某些import的包（package）打包到bundle中，或者在運行時（runtime）再去從外部獲取這些擴展依賴 // https://webpack.docschina.org/configuration/externals/\n// const { CleanWebpackPlugin } = require('clean-webpack-plugin'); // build打包前清除該目錄檔案 避免舊文件存在\n// 除去node中干擾模快 如jquery 使用cdn引入而不使用node module內的jquery\n\n// https://medium.com/i-am-mike/webpack%E6%95%99%E5%AD%B8-%E4%B8%89-%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%AD%A2%E7%9A%84watch-dbf98ebf8356\n// production ：上線版本，需要將檔案給壓縮跟優化\n// development：開發中，只編譯\n// webpack4預設是production，所以在不設定mode的情況下watch會執行production狀態，\n// 但是這樣不太好，因為開發中的時候你每次執行watch就除了幫你編譯還執行的壓縮跟優化，\n// 太消耗資源，而且會佔太多電腦記憶體，所以我們會在執行npm script的時候要加上 “watch”: “webpack --watch --mode development”\n\n// https://juejin.im/post/5a10d9fe51882554bd50a5d3\n// express-hot-reload // https://github.com/kevinsimper/express-reload\n// webpack-hot-reload // https://medium.com/@Ahmad.Asaad/webpack-dev-server-hot-module-replacement-hmr-and-source-maps-easing-the-pain-e7cee99e3bdf\n// webpack4 sass & css https://medium.com/@mmaarriicckk/webpack4-sass-css-835062e31f6f\n// style-loader // 將css打包進js內,需要轉換字串所引用\n// css-loader // 將css轉換成CommonJS (es5前使用的模組化標準)\n// 處理sass轉換 // sass-loader-將sass轉成css編輯方式,而node-sass,則可以透過.sass轉成.css\n// webpack ./src/components/index.js --output ./dist/.bundle.js --mode development\n\n// dev && prod config 拆分方法\n// https://neighborhood999.github.io/webpack-tutorial-gitbook/Part1/WebpackDevServer.html \n// 1. dev 設定檔省略了優化，當你不斷的 rebuild 時，他們是不必要的。所以不需要 webpack.optimize plugins。\n\n// https://webpack.js.org/configuration/mode/\n// qa why webpack production 的綑綁會變成1.main.js'\n\n// !!!!! chunk split !!! important\n// https://webpack.js.org/guides/code-splitting/\n\n// 操做完 檢查 \n// npm run start    npm run test  npm run dockerize npm run build\n\n// import Html from './src/html'\n// console.log(Html)\n\nconst client = {\n  // mode: 'development', // npm run start 沒有設定會出現warning // 可拆成webpack.production.config.js & webpack.development.config.js\n  devtool: 'cheap-module-eval-source-map',\n  // entry: './src/index.js', // can use for prod env \n  entry: { bundle: './src/index.js' }, // can use for prod env \n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    // filename: './main.js'\n    filename: '[name].js'\n  },\n  optimization: { // 將main.js的重複依賴項目刪除\n    splitChunks: { // 同時index.html自動拆成兩個依賴 <script type=\"text/javascript\" src=\"./vendors~main.main.js\"></script><script type=\"text/javascript\" src=\"./main.js\"></script>\n      chunks: 'all',\n    },\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(), // 排序输出，依調用次數決定各模組 ids，常被調用者會配給更短的 id，使其更好預測並降低文件大小。\n    new webpack.NoEmitOnErrorsPlugin(), // 確保輸出的 assets 不會包含錯誤在裡面，在 compile 階段，有錯誤出現就終止。也可在 webpack.config 檔中設定 bail: true 的意思一樣\n    new HtmlWebpackPlugin({ // 為你生成一個HTML5文件，其中包括使用script標籤的body中的所有webpack包 // 打包输出HTML\n      title: 'React Webpack Babel Setup',\n      // minify: {\n      //   removeComments: true, // 移除HTML中的注釋\n      //   collapseWhitespace: false, // 删除空白符与换行符 會變一行\n      //   minifyCSS: false// 壓縮內聯css\n      // },\n      // filename: './index.html',\n      template: 'index.html' //　以根目錄底下的index.html當作模版 添加<div id=app></div> 若該index.html有其他js build出來的index.html也會有\n    }),\n    // new CleanWebpackPlugin({\n    //   cleanAfterEveryBuildPatterns: ['dist']\n    // })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/, // 1.遇到js檔案時\n        exclude: /(node_modules)/,\n        use: {\n          loader: 'babel-loader', // 2.先用babel-loader進行轉換 在添加進綑綁中\n        }\n      },\n      {\n        test: /\\.html$/,\n        use: [\n          {\n            loader: \"html-loader\"\n          }\n        ]\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['*', '.js', '.jsx']\n  },\n}\n\nconst server = {\n  devtool: \"source-map\",\n  entry: { server: './server.js' }, // 這樣設定才不會打包到預設 webpack4 預設 main.js內 會獨立產一隻js 產玩的server.js 經過babel編譯就可以使用import es6 \n  output: {\n    path: path.resolve(__dirname,'dist'), // 又server.js 在 ./dist 資料夾內生成  server.js => res.sendFile index.html讀取路徑也要調整\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/, // 1.遇到js檔案時\n        exclude: /(node_modules)/,\n        use: {\n          loader: 'babel-loader', // 2.先用babel-loader進行轉換 在添加進綑綁中\n        }\n      },\n      // {\n      //   test: /\\.html$/,\n      //   use: [\n      //     {\n      //       loader: \"html-loader\"\n      //     }\n      //   ]\n      // }\n    ]\n  },\n  plugins: [\n  ],\n  externals: [nodeExternals()],\n  target: 'node',\n  // node: {\n  //   __dirname: false,\n  //   __filename: false,\n  // }\n  \n}\n\nmodule.exports = [client, server];\n\n// =====================================================================================================================\n\n// module.exports = {\n//   mode: 'development', // npm run start 沒有設定會出現warning // 可拆成webpack.production.config.js & webpack.development.config.js\n//   // mode: 'production',\n//   // context: path.resolve(__dirname, 'src'),\n//   devtool: 'cheap-module-eval-source-map',\n//   // entry: {\n//   //   app: [\n//   //     './src/index.js',\n//   //     // 'webpack-hot-middleware/client?reload=true' // 現在build 會包含此模組 但不需要 webpack改成dev & prod 後 將此依賴僅輸出於dev 使build出來的檔案不包含該模組\n//   //   ]\n//   // },\n//   entry: './src/index.js', // can use for prod env \n//   output: {\n//     path: path.join(__dirname,'/dist'),\n//     filename: './main.js'\n//   },\n//   optimization: { // 將main.js的重複依賴項目刪除\n//     splitChunks: { // 同時index.html自動拆成兩個依賴 <script type=\"text/javascript\" src=\"./vendors~main.main.js\"></script><script type=\"text/javascript\" src=\"./main.js\"></script>\n//       chunks: 'all',\n//     },\n//   },\n//   // 其他優化套件\n//   // mini-css-extract-plugin：對於將CSS從主應用程序中分離出來很有用。\n//   // bundle-loader：用於拆分代碼並延遲加載生成的包。\n//   // promise-loader：類似於，bundle-loader但使用諾言\n//   // output: {\n//   //   path: path.resolve(__dirname, 'dist'),\n//   //   // path: path.join(__dirname, 'dist'),\n//   //   // filename: '[name].js',\n//   //   filename: 'bundle.js',\n//   //   publicPath: 'http://localhost:8080/dist/'\n//   //   // publicPath: '/'\n//   // },\n//   plugins: [\n//     // https://medium.com/@savemuse/webpack-%E5%B8%B8%E7%94%A8-plugins-%E4%BB%8B%E7%B4%B9-1505ea01052d\n//     new webpack.optimize.OccurrenceOrderPlugin(), // 排序输出，依調用次數決定各模組 ids，常被調用者會配給更短的 id，使其更好預測並降低文件大小。\n//     // new webpack.HotModuleReplacementPlugin(), // 熱加載 HMR // build　出來的檔案不該有這個 之後優化 限定於development Ver.\n//     new webpack.NoEmitOnErrorsPlugin(), // 確保輸出的 assets 不會包含錯誤在裡面，在 compile 階段，有錯誤出現就終止。也可在 webpack.config 檔中設定 bail: true 的意思一樣\n//     new HtmlWebpackPlugin({ // 為你生成一個HTML5文件，其中包括使用script標籤的body中的所有webpack包 // 打包输出HTML\n//       title: 'React Webpack Babel Setup',\n//       minify: {\n//         removeComments: true, // 移除HTML中的注釋\n//         collapseWhitespace: false, // 删除空白符与换行符 會變一行\n//         minifyCSS: false// 壓縮內聯css\n//       },\n//       // filename: '', // 輸出的名稱?\n//       template: 'index.html' //　以根目錄底下的index.html當作模版 添加<div id=app></div> 若該index.html有其他js build出來的index.html也會有\n//     })\n//     // html-webpack-plugin默認將會在output.path的目錄下創建一個index.html文件，並在這個文件中插入一個script標籤，標籤的src為 output.filename\n//   ],\n//   module: {\n//     rules: [\n//       {\n//         test: /\\.(js|jsx)$/, // 1.遇到js檔案時\n//         exclude: /(node_modules)/,\n//         use: {\n//           loader: 'babel-loader', // 2.先用babel-loader進行轉換 在添加進綑綁中\n//         }\n//       },\n//       {\n//         test: /\\.html$/,\n//         use: [\n//           {\n//             loader: \"html-loader\"\n//           }\n//         ]\n//       }\n//     ]\n//   },\n//   resolve: {\n//     extensions: ['*', '.js', '.jsx']\n//   },\n// };\n","module.exports = require(\"path\");","module.exports = require(\"html-webpack-plugin\");","module.exports = require(\"webpack-node-externals\");","module.exports = require(\"express\");"],"sourceRoot":""}